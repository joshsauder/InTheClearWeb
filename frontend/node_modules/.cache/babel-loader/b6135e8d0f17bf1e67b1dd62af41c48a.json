{"ast":null,"code":"var _jsxFileName = \"/Users/joshsauder/Projects/intheclearweb/src/components/GooglePlaces.js\";\nimport React, { Component, createRef } from 'react';\nimport '../App.css';\nimport '../style/GooglePlaces.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nclass GooglePlaces extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startCoordinates: {\n        lat: 37.3317,\n        lng: -122.0306\n      },\n      endCoordinates: {\n        lat: 37.3317,\n        lng: -122.0306\n      }\n    };\n  }\n\n  componentDidMount() {\n    var startInput = document.getElementById('locationStart');\n    var destinationInput = document.getElementById('locationEnd');\n    var autocompleteStart = new window.google.maps.places.Autocomplete(startInput);\n    var autocompleteDest = new window.google.maps.places.Autocomplete(destinationInput);\n    window.google.maps.event.addListener(autocompleteStart, 'place_changed', function () {\n      var placeStart = autocompleteStart.getPlace();\n      document.getElementById('cityStart').value = placeStart.name;\n      var lat = document.getElementById('latStart').value = placeStart.geometry.location.lat();\n      var long = document.getElementById('longStart').value = placeStart.geometry.location.lng();\n      this.setState({\n        startCoordinates: {\n          lat: lat,\n          lng: long\n        }\n      });\n    });\n    window.google.maps.event.addListener(autocompleteDest, 'place_changed', function () {\n      var placeEnd = autocompleteStart.getPlace();\n      document.getElementById('cityEnd').value = placeEnd.name;\n      var lat = document.getElementById('latEnd').value = placeEnd.geometry.location.lat();\n      var long = document.getElementById('longEnd').value = placeEnd.geometry.location.lng();\n      this.setState({\n        endCoordinates: {\n          lat: lat,\n          lng: long\n        }\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.startCoordinates !== this.state.startCoordinates) {\n      this.props.callbackStart(this.state.startCoordinates);\n    } else if (prevState.endCoordinates !== this.state.endCoordinates) {\n      this.props.callbackEnd(this.state.endCoordinates);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"row container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      className: \"directionsJumbotron ml-md-2 mt-md-2 col-md-6 col-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-group mb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"form-control\",\n      id: \"locationStart\",\n      type: \"text\",\n      size: \"50\",\n      placeholder: \"Start Location\",\n      autoComplete: \"on\",\n      runat: \"server\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"hidden\",\n      id: \"cityStart\",\n      name: \"city2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"hidden\",\n      id: \"latStart\",\n      name: \"cityLat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"hidden\",\n      id: \"longStart\",\n      name: \"cityLng\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"input-group mb-1 mt-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"form-control\",\n      id: \"locationEnd\",\n      type: \"text\",\n      size: \"50\",\n      placeholder: \"Destination Location\",\n      autoComplete: \"on\",\n      runat: \"server\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"hidden\",\n      id: \"cityEnd\",\n      name: \"city2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"hidden\",\n      id: \"latEnd\",\n      name: \"cityLat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"hidden\",\n      id: \"longEnd\",\n      name: \"cityLng\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default GooglePlaces;","map":{"version":3,"sources":["/Users/joshsauder/Projects/intheclearweb/src/components/GooglePlaces.js"],"names":["React","Component","createRef","Jumbotron","GooglePlaces","constructor","props","state","startCoordinates","lat","lng","endCoordinates","componentDidMount","startInput","document","getElementById","destinationInput","autocompleteStart","window","google","maps","places","Autocomplete","autocompleteDest","event","addListener","placeStart","getPlace","value","name","geometry","location","long","setState","placeEnd","componentDidUpdate","prevProps","prevState","callbackStart","callbackEnd","render"],"mappings":"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","sourcesContent":["import React, {Component, createRef} from 'react';\nimport '../App.css';\nimport '../style/GooglePlaces.css'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\n\n\nclass GooglePlaces extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state ={\n            startCoordinates: {\n                lat: 37.3317,\n                lng: -122.0306\n            },\n            endCoordinates :{\n                lat: 37.3317,\n                lng: -122.0306\n            }\n\n        }\n      }\n\n      componentDidMount(){\n          \n          var startInput = document.getElementById('locationStart');\n          var destinationInput = document.getElementById('locationEnd')\n\n          var autocompleteStart = new window.google.maps.places.Autocomplete(startInput);\n          var autocompleteDest = new window.google.maps.places.Autocomplete(destinationInput);\n\n          window.google.maps.event.addListener(autocompleteStart, 'place_changed', function() {\n            var placeStart = autocompleteStart.getPlace();\n            document.getElementById('cityStart').value = placeStart.name;\n            var lat = document.getElementById('latStart').value = placeStart.geometry.location.lat();\n            var long = document.getElementById('longStart').value = placeStart.geometry.location.lng();\n            this.setState({startCoordinates:{lat: lat, lng: long}})\n\n          })\n\n          window.google.maps.event.addListener(autocompleteDest, 'place_changed', function() {\n            var placeEnd = autocompleteStart.getPlace();\n            document.getElementById('cityEnd').value = placeEnd.name;\n            var lat = document.getElementById('latEnd').value = placeEnd.geometry.location.lat();\n            var long = document.getElementById('longEnd').value = placeEnd.geometry.location.lng();\n            this.setState({endCoordinates:{lat: lat, lng: long}})\n  \n          })\n\n      }\n\n      componentDidUpdate(prevProps, prevState){\n            if(prevState.startCoordinates !== this.state.startCoordinates){\n                this.props.callbackStart(this.state.startCoordinates);\n            } else if(prevState.endCoordinates !== this.state.endCoordinates){\n                this.props.callbackEnd(this.state.endCoordinates);\n            }\n      }\n\n      render() {\n          return (\n          <div className=\"row container\">\n            <Jumbotron className=\"directionsJumbotron ml-md-2 mt-md-2 col-md-6 col-12\">\n                <div className=\"input-group mb-1\">\n                    <input className=\"form-control\" id=\"locationStart\" type=\"text\" size=\"50\" placeholder=\"Start Location\" autoComplete=\"on\" runat=\"server\" />\n                    <input type=\"hidden\" id=\"cityStart\" name=\"city2\" />\n                    <input type=\"hidden\" id=\"latStart\" name=\"cityLat\" />\n                    <input type=\"hidden\" id=\"longStart\" name=\"cityLng\" />\n                </div>\n                <div className=\"input-group mb-1 mt-4\">\n                    <input className=\"form-control\" id=\"locationEnd\" type=\"text\" size=\"50\" placeholder=\"Destination Location\" autoComplete=\"on\" runat=\"server\" />\n                    <input type=\"hidden\" id=\"cityEnd\" name=\"city2\" />\n                    <input type=\"hidden\" id=\"latEnd\" name=\"cityLat\" />\n                    <input type=\"hidden\" id=\"longEnd\" name=\"cityLng\" />\n                </div>\n            </Jumbotron>\n          </div>\n          )\n      }\n}\n\nexport default GooglePlaces;"]},"metadata":{},"sourceType":"module"}