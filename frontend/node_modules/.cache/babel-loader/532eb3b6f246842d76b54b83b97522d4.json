{"ast":null,"code":"var _jsxFileName = \"/Users/joshsauder/Projects/intheclearweb/src/components/googleMap.js\";\nimport React, { Component, createRef } from 'react';\nimport '../App.css';\nimport GooglePlaces from './GooglePlaces';\nimport { getDirections } from '../services/googleMaps';\n\nclass GoogleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.GoogleMapsRef = createRef();\n\n    this.createMap = () => new window.google.maps.Map(this.GoogleMapsRef.current, {\n      zoom: 16,\n      center: this.state.location,\n      disableDefaultUI: true\n    });\n\n    this.state = {\n      loaded: false,\n      startLocation: {\n        lat: 0,\n        lng: 0\n      },\n      endLocation: {\n        lat: 0,\n        lng: 0\n      }\n    };\n    this.callbackStart = this.callbackStart.bind(this);\n    this.callbackEnd = this.callbackEnd.bind(this);\n  }\n\n  componentDidMount() {\n    const googleMapsAPI = document.createElement(\"script\");\n    googleMapsAPI.src = \"https://maps.googleapis.com/maps/api/js?key=\".concat(process.env.REACT_APP_GOOGLE_MAPS, \"&libraries=places\");\n    console.log(googleMapsAPI.src);\n    googleMapsAPI.id = \"googleMaps\";\n    window.document.body.appendChild(googleMapsAPI);\n    googleMapsAPI.addEventListener(\"load\", () => {\n      this.setState({\n        loaded: true\n      });\n      this.googleMaps = this.createMap();\n      this.markerStart = null;\n      this.markerEnd = null;\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.endLocation.lat !== 0 && this.state.endLocation.lng !== 0 && this.state.startLocation.lat !== 0 && this.state.startLocation.lng !== 0) {\n      if (prevState.startLocation !== this.state.startLocation || prevState.endLocation !== this.state.endLocation) {\n        let json = getDirections(this.state.startLocation, this.state.endLocation);\n        showDirections(json);\n      }\n    }\n  }\n\n  showDirections(json) {\n    var path = google.maps.geometry.encoding.decodePath(json.overview_polyline.points);\n\n    for (var i = 0; i < path.length; i++) {\n      bounds.extend(path[i]);\n    }\n\n    var polyline = new google.maps.Polyline({\n      path: path,\n      strokeColor: '#00BBFF',\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      map: this.googleMaps // strokeColor: \"#0000FF\",\n      // strokeOpacity: 1.0,\n      // strokeWeight: 2\n\n    });\n    polyline.setMap(this.googleMaps);\n    this.googleMaps.fitBounds(bounds);\n  }\n\n  callbackStart(coordinates) {\n    this.setState({\n      startLocation: coordinates\n    });\n    var newCoordinates = new window.google.maps.LatLng(coordinates.lat, coordinates.lng);\n    this.markerStart = new window.google.maps.Marker({\n      position: newCoordinates,\n      map: this.googleMaps,\n      title: \"Start Location\",\n      animation: window.google.maps.Animation.DROP\n    });\n    this.googleMaps.setCenter(newCoordinates);\n    this.markerStart.setMap(this.googleMaps);\n  }\n\n  callbackEnd(coordinates) {\n    this.setState({\n      endLocation: coordinates\n    });\n    var newCoordinates = new window.google.maps.LatLng(coordinates.lat, coordinates.lng);\n    this.markerEnd = new window.google.maps.Marker({\n      position: newCoordinates,\n      title: \"End Location\",\n      animation: window.google.maps.Animation.DROP\n    });\n    this.googleMaps.setCenter(newCoordinates);\n    this.markerEnd.setMap(this.googleMaps);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"map\",\n      ref: this.GoogleMapsRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), this.state.loaded ? React.createElement(GooglePlaces, {\n      callbackStart: this.callbackStart,\n      callbackEnd: this.callbackEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default GoogleMap;","map":{"version":3,"sources":["/Users/joshsauder/Projects/intheclearweb/src/components/googleMap.js"],"names":["React","Component","createRef","GooglePlaces","getDirections","GoogleMap","constructor","props","GoogleMapsRef","createMap","window","google","maps","Map","current","zoom","center","state","location","disableDefaultUI","loaded","startLocation","lat","lng","endLocation","callbackStart","bind","callbackEnd","componentDidMount","googleMapsAPI","document","createElement","src","process","env","REACT_APP_GOOGLE_MAPS","console","log","id","body","appendChild","addEventListener","setState","googleMaps","markerStart","markerEnd","componentDidUpdate","prevProps","prevState","json","showDirections","path","geometry","encoding","decodePath","overview_polyline","points","i","length","bounds","extend","polyline","Polyline","strokeColor","strokeOpacity","strokeWeight","map","setMap","fitBounds","coordinates","newCoordinates","LatLng","Marker","position","title","animation","Animation","DROP","setCenter","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAO,YAAP;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,aAAR,QAA4B,wBAA5B;;AAEA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAE5BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAiBnBC,aAjBmB,GAiBHN,SAAS,EAjBN;;AAAA,SAgDnBO,SAhDmB,GAgDP,MACV,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,GAAvB,CAA2B,KAAKL,aAAL,CAAmBM,OAA9C,EAAuD;AACrDC,MAAAA,IAAI,EAAE,EAD+C;AAErDC,MAAAA,MAAM,EAAE,KAAKC,KAAL,CAAWC,QAFkC;AAGrDC,MAAAA,gBAAgB,EAAE;AAHmC,KAAvD,CAjDiB;;AAEjB,SAAKF,KAAL,GAAa;AACXG,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,aAAa,EAAC;AACZC,QAAAA,GAAG,EAAE,CADO;AAEZC,QAAAA,GAAG,EAAE;AAFO,OAFH;AAMXC,MAAAA,WAAW,EAAE;AACXF,QAAAA,GAAG,EAAE,CADM;AAEXC,QAAAA,GAAG,EAAE;AAFM;AANF,KAAb;AAWA,SAAKE,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAIDE,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,aAAa,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAtB;AACAF,IAAAA,aAAa,CAACG,GAAd,yDAAmEC,OAAO,CAACC,GAAR,CAAYC,qBAA/E;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYR,aAAa,CAACG,GAA1B;AACAH,IAAAA,aAAa,CAACS,EAAd,GAAmB,YAAnB;AACA5B,IAAAA,MAAM,CAACoB,QAAP,CAAgBS,IAAhB,CAAqBC,WAArB,CAAiCX,aAAjC;AAEAA,IAAAA,aAAa,CAACY,gBAAd,CAA+B,MAA/B,EAAuC,MAAM;AAC3C,WAAKC,QAAL,CAAc;AAACtB,QAAAA,MAAM,EAAE;AAAT,OAAd;AACA,WAAKuB,UAAL,GAAkB,KAAKlC,SAAL,EAAlB;AACA,WAAKmC,WAAL,GAAmB,IAAnB;AACA,WAAKC,SAAL,GAAiB,IAAjB;AACD,KALD;AAMD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AAEtC,QAAG,KAAK/B,KAAL,CAAWO,WAAX,CAAuBF,GAAvB,KAA+B,CAA/B,IAAoC,KAAKL,KAAL,CAAWO,WAAX,CAAuBD,GAAvB,KAA+B,CAAnE,IACD,KAAKN,KAAL,CAAWI,aAAX,CAAyBC,GAAzB,KAAiC,CADhC,IACqC,KAAKL,KAAL,CAAWI,aAAX,CAAyBE,GAAzB,KAAiC,CADzE,EAC2E;AAEvE,UAAIyB,SAAS,CAAC3B,aAAV,KAA4B,KAAKJ,KAAL,CAAWI,aAAvC,IAAwD2B,SAAS,CAACxB,WAAV,KAA0B,KAAKP,KAAL,CAAWO,WAAjG,EAA6G;AAC3G,YAAIyB,IAAI,GAAG7C,aAAa,CAAC,KAAKa,KAAL,CAAWI,aAAZ,EAA2B,KAAKJ,KAAL,CAAWO,WAAtC,CAAxB;AACA0B,QAAAA,cAAc,CAACD,IAAD,CAAd;AACD;AACF;AAEJ;;AAWDC,EAAAA,cAAc,CAACD,IAAD,EAAM;AAChB,QAAIE,IAAI,GAAGxC,MAAM,CAACC,IAAP,CAAYwC,QAAZ,CAAqBC,QAArB,CAA8BC,UAA9B,CAAyCL,IAAI,CAACM,iBAAL,CAAuBC,MAAhE,CAAX;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACO,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCE,MAAAA,MAAM,CAACC,MAAP,CAAcT,IAAI,CAACM,CAAD,CAAlB;AACD;;AAED,QAAII,QAAQ,GAAG,IAAIlD,MAAM,CAACC,IAAP,CAAYkD,QAAhB,CAAyB;AACtCX,MAAAA,IAAI,EAAEA,IADgC;AAEtCY,MAAAA,WAAW,EAAE,SAFyB;AAGtCC,MAAAA,aAAa,EAAE,GAHuB;AAItCC,MAAAA,YAAY,EAAE,CAJwB;AAKtCC,MAAAA,GAAG,EAAE,KAAKvB,UAL4B,CAMpC;AACA;AACA;;AARoC,KAAzB,CAAf;AAUAkB,IAAAA,QAAQ,CAACM,MAAT,CAAgB,KAAKxB,UAArB;AACA,SAAKA,UAAL,CAAgByB,SAAhB,CAA0BT,MAA1B;AACH;;AAEDlC,EAAAA,aAAa,CAAC4C,WAAD,EAAa;AACtB,SAAK3B,QAAL,CAAc;AAACrB,MAAAA,aAAa,EAAEgD;AAAhB,KAAd;AAEA,QAAIC,cAAc,GAAG,IAAI5D,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB2D,MAAvB,CAA8BF,WAAW,CAAC/C,GAA1C,EAA+C+C,WAAW,CAAC9C,GAA3D,CAArB;AAEA,SAAKqB,WAAL,GAAmB,IAAIlC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB4D,MAAvB,CAA8B;AAC/CC,MAAAA,QAAQ,EAAEH,cADqC;AAE/CJ,MAAAA,GAAG,EAAE,KAAKvB,UAFqC;AAG/C+B,MAAAA,KAAK,EAAE,gBAHwC;AAI/CC,MAAAA,SAAS,EAAEjE,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBgE,SAAnB,CAA6BC;AAJO,KAA9B,CAAnB;AAMA,SAAKlC,UAAL,CAAgBmC,SAAhB,CAA0BR,cAA1B;AACA,SAAK1B,WAAL,CAAiBuB,MAAjB,CAAwB,KAAKxB,UAA7B;AAEH;;AAEDhB,EAAAA,WAAW,CAAC0C,WAAD,EAAa;AACtB,SAAK3B,QAAL,CAAc;AAAClB,MAAAA,WAAW,EAAE6C;AAAd,KAAd;AAEA,QAAIC,cAAc,GAAG,IAAI5D,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB2D,MAAvB,CAA8BF,WAAW,CAAC/C,GAA1C,EAA+C+C,WAAW,CAAC9C,GAA3D,CAArB;AAEA,SAAKsB,SAAL,GAAiB,IAAInC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB4D,MAAvB,CAA8B;AAC7CC,MAAAA,QAAQ,EAAEH,cADmC;AAE7CI,MAAAA,KAAK,EAAE,cAFsC;AAG7CC,MAAAA,SAAS,EAAEjE,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBgE,SAAnB,CAA6BC;AAHK,KAA9B,CAAjB;AAMA,SAAKlC,UAAL,CAAgBmC,SAAhB,CAA0BR,cAA1B;AACA,SAAKzB,SAAL,CAAesB,MAAf,CAAsB,KAAKxB,UAA3B;AAED;;AAGDoC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,GAAG,EAAE,KAAKvE,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAEE,KAAKS,KAAL,CAAWG,MAAX,GAAoB,oBAAC,YAAD;AAAc,MAAA,aAAa,EAAE,KAAKK,aAAlC;AAAiD,MAAA,WAAW,EAAE,KAAKE,WAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApB,GAAyG,IAF3G,CADF;AAMD;;AAvH2B;;AA2HlC,eAAetB,SAAf","sourcesContent":["import React, {Component, createRef} from 'react';\nimport '../App.css';\nimport GooglePlaces from './GooglePlaces';\nimport {getDirections} from '../services/googleMaps';\n\nclass GoogleMap extends Component {\n\n      constructor(props) {\n        super(props);\n        this.state = {\n          loaded: false, \n          startLocation:{\n            lat: 0,\n            lng: 0\n          },\n          endLocation: {\n            lat: 0,\n            lng: 0\n          }\n        }\n        this.callbackStart = this.callbackStart.bind(this);\n        this.callbackEnd = this.callbackEnd.bind(this);\n      }\n\n      GoogleMapsRef = createRef()\n\n      componentDidMount() {\n        const googleMapsAPI = document.createElement(\"script\")\n        googleMapsAPI.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS}&libraries=places`;\n        console.log(googleMapsAPI.src);\n        googleMapsAPI.id = \"googleMaps\"\n        window.document.body.appendChild(googleMapsAPI);\n\n        googleMapsAPI.addEventListener(\"load\", () => {\n          this.setState({loaded: true})\n          this.googleMaps = this.createMap()\n          this.markerStart = null;\n          this.markerEnd = null;\n        })\n      }\n\n      componentDidUpdate(prevProps, prevState){\n\n        if(this.state.endLocation.lat !== 0 && this.state.endLocation.lng !== 0 && \n          this.state.startLocation.lat !== 0 && this.state.startLocation.lng !== 0){\n\n            if (prevState.startLocation !== this.state.startLocation || prevState.endLocation !== this.state.endLocation){\n              let json = getDirections(this.state.startLocation, this.state.endLocation);\n              showDirections(json);\n            }\n          }\n\n      }\n\n\n      createMap = () =>\n        new window.google.maps.Map(this.GoogleMapsRef.current, {\n          zoom: 16,\n          center: this.state.location,\n          disableDefaultUI: true,\n        })\n\n      \n      showDirections(json){\n          var path = google.maps.geometry.encoding.decodePath(json.overview_polyline.points);\n\n          for (var i = 0; i < path.length; i++) {\n            bounds.extend(path[i]);\n          }\n\n          var polyline = new google.maps.Polyline({\n            path: path,\n            strokeColor: '#00BBFF',\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            map: this.googleMaps\n              // strokeColor: \"#0000FF\",\n              // strokeOpacity: 1.0,\n              // strokeWeight: 2\n          });\n          polyline.setMap(this.googleMaps);\n          this.googleMaps.fitBounds(bounds);\n      }\n\n      callbackStart(coordinates){\n          this.setState({startLocation: coordinates});\n\n          var newCoordinates = new window.google.maps.LatLng(coordinates.lat, coordinates.lng);\n\n          this.markerStart = new window.google.maps.Marker({\n            position: newCoordinates,\n            map: this.googleMaps,\n            title: \"Start Location\",\n            animation: window.google.maps.Animation.DROP\n          })\n          this.googleMaps.setCenter(newCoordinates)\n          this.markerStart.setMap(this.googleMaps)\n\n      }\n\n      callbackEnd(coordinates){\n        this.setState({endLocation: coordinates});\n\n        var newCoordinates = new window.google.maps.LatLng(coordinates.lat, coordinates.lng);\n\n        this.markerEnd = new window.google.maps.Marker({\n          position: newCoordinates,\n          title: \"End Location\",\n          animation: window.google.maps.Animation.DROP\n        })\n\n        this.googleMaps.setCenter(newCoordinates)\n        this.markerEnd.setMap(this.googleMaps)\n\n      }\n\n\n      render() {\n        return (\n          <div>\n          <div className=\"map\" ref={this.GoogleMapsRef} />\n          { this.state.loaded ? <GooglePlaces callbackStart={this.callbackStart} callbackEnd={this.callbackEnd} /> : null }\n          </div>\n        );\n      }\n    \n}\n\nexport default GoogleMap;"]},"metadata":{},"sourceType":"module"}