{"ast":null,"code":"var _jsxFileName = \"/Users/joshsauder/Projects/intheclearweb/src/components/googleMap.js\";\nimport React, { Component, createRef } from 'react';\nimport '../App.css';\nimport GooglePlaces from './GooglePlaces';\nimport { getDirections } from '../services/googleMaps';\n\nclass GoogleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.GoogleMapsRef = createRef();\n\n    this.createMap = () => new window.google.maps.Map(this.GoogleMapsRef.current, {\n      zoom: 10,\n      center: {\n        lat: 37.3230,\n        lng: -122.0322\n      },\n      disableDefaultUI: true\n    });\n\n    this.state = {\n      loaded: false,\n      startLocation: {\n        lat: 0,\n        lng: 0\n      },\n      endLocation: {\n        lat: 0,\n        lng: 0\n      }\n    };\n    this.callbackStart = this.callbackStart.bind(this);\n    this.callbackEnd = this.callbackEnd.bind(this);\n  }\n\n  componentDidMount() {\n    const googleMapsAPI = document.createElement(\"script\");\n    googleMapsAPI.src = \"https://maps.googleapis.com/maps/api/js?key=\".concat(process.env.REACT_APP_GOOGLE_MAPS, \"&libraries=places\");\n    console.log(googleMapsAPI.src);\n    googleMapsAPI.id = \"googleMaps\";\n    window.document.body.appendChild(googleMapsAPI);\n    googleMapsAPI.addEventListener(\"load\", () => {\n      this.setState({\n        loaded: true\n      });\n      this.googleMaps = this.createMap();\n      this.markerStart = null;\n      this.markerEnd = null;\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.endLocation.lat !== 0 && this.state.endLocation.lng !== 0 && this.state.startLocation.lat !== 0 && this.state.startLocation.lng !== 0) {\n      if (prevState.startLocation !== this.state.startLocation || prevState.endLocation !== this.state.endLocation) {\n        var url = \"https://maps.googleapis.com/maps/api/directions/json?\";\n        url = \"\".concat(url, \"origin=\").concat(this.state.startLocation.lat, \",\").concat(this.state.startLocation.lng, \"&destination=\").concat(this.state.endLocation.lat, \",\").concat(this.state.endLocation.lng, \"&mode=transit&key=\").concat(process.env.REACT_APP_GOOGLE_MAPS);\n        fetch(url).then(response => {\n          if (response.ok) {\n            console.log(response);\n            this.showDirections(response.routes[0]);\n          } else {\n            console.log(response);\n          }\n        }).then(data => console.log(data)).catch(data => console.log(data));\n      }\n    }\n  }\n\n  showDirections(json) {\n    var path = window.google.maps.geometry.encoding.decodePath(json.overview_polyline.points);\n    var bounds = new window.google.maps.LatLngBounds();\n\n    for (var i = 0; i < path.length; i++) {\n      bounds.extend(path[i]);\n    }\n\n    var polyline = new window.google.maps.Polyline({\n      path: path,\n      strokeColor: '#00BBFF',\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      map: this.googleMaps // strokeColor: \"#0000FF\",\n      // strokeOpacity: 1.0,\n      // strokeWeight: 2\n\n    });\n    polyline.setMap(this.googleMaps);\n    this.googleMaps.fitBounds(bounds);\n  }\n\n  callbackStart(coordinates) {\n    this.setState({\n      startLocation: coordinates\n    });\n    var newCoordinates = new window.google.maps.LatLng(coordinates.lat, coordinates.lng);\n    this.markerStart = new window.google.maps.Marker({\n      position: newCoordinates,\n      map: this.googleMaps,\n      title: \"Start Location\",\n      animation: window.google.maps.Animation.DROP\n    });\n    this.googleMaps.setCenter(newCoordinates);\n    this.markerStart.setMap(this.googleMaps);\n  }\n\n  callbackEnd(coordinates) {\n    this.setState({\n      endLocation: coordinates\n    });\n    var newCoordinates = new window.google.maps.LatLng(coordinates.lat, coordinates.lng);\n    this.markerEnd = new window.google.maps.Marker({\n      position: newCoordinates,\n      title: \"End Location\",\n      animation: window.google.maps.Animation.DROP\n    });\n    this.googleMaps.setCenter(newCoordinates);\n    this.markerEnd.setMap(this.googleMaps);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"map\",\n      ref: this.GoogleMapsRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), this.state.loaded ? React.createElement(GooglePlaces, {\n      callbackStart: this.callbackStart,\n      callbackEnd: this.callbackEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default GoogleMap;","map":{"version":3,"sources":["/Users/joshsauder/Projects/intheclearweb/src/components/googleMap.js"],"names":["React","Component","createRef","GooglePlaces","getDirections","GoogleMap","constructor","props","GoogleMapsRef","createMap","window","google","maps","Map","current","zoom","center","lat","lng","disableDefaultUI","state","loaded","startLocation","endLocation","callbackStart","bind","callbackEnd","componentDidMount","googleMapsAPI","document","createElement","src","process","env","REACT_APP_GOOGLE_MAPS","console","log","id","body","appendChild","addEventListener","setState","googleMaps","markerStart","markerEnd","componentDidUpdate","prevProps","prevState","url","fetch","then","response","ok","showDirections","routes","data","catch","json","path","geometry","encoding","decodePath","overview_polyline","points","bounds","LatLngBounds","i","length","extend","polyline","Polyline","strokeColor","strokeOpacity","strokeWeight","map","setMap","fitBounds","coordinates","newCoordinates","LatLng","Marker","position","title","animation","Animation","DROP","setCenter","render"],"mappings":"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","sourcesContent":["import React, {Component, createRef} from 'react';\nimport '../App.css';\nimport GooglePlaces from './GooglePlaces';\nimport {getDirections} from '../services/googleMaps';\n\nclass GoogleMap extends Component {\n\n      constructor(props) {\n        super(props);\n        this.state = {\n          loaded: false, \n          startLocation:{\n            lat: 0,\n            lng: 0\n          },\n          endLocation: {\n            lat: 0,\n            lng: 0\n          }\n        }\n        this.callbackStart = this.callbackStart.bind(this);\n        this.callbackEnd = this.callbackEnd.bind(this);\n      }\n\n      GoogleMapsRef = createRef()\n\n      componentDidMount() {\n        const googleMapsAPI = document.createElement(\"script\")\n        googleMapsAPI.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS}&libraries=places`;\n        console.log(googleMapsAPI.src);\n        googleMapsAPI.id = \"googleMaps\"\n        window.document.body.appendChild(googleMapsAPI);\n\n        googleMapsAPI.addEventListener(\"load\", () => {\n          this.setState({loaded: true})\n          this.googleMaps = this.createMap()\n          this.markerStart = null;\n          this.markerEnd = null;\n        })\n      }\n\n      componentDidUpdate(prevProps, prevState){\n\n        if(this.state.endLocation.lat !== 0 && this.state.endLocation.lng !== 0 && \n          this.state.startLocation.lat !== 0 && this.state.startLocation.lng !== 0){\n\n            if (prevState.startLocation !== this.state.startLocation || prevState.endLocation !== this.state.endLocation){\n                  var url = \"https://maps.googleapis.com/maps/api/directions/json?\"\n                  url = `${url}origin=${this.state.startLocation.lat},${this.state.startLocation.lng}&destination=${this.state.endLocation.lat},${this.state.endLocation.lng}&mode=transit&key=${process.env.REACT_APP_GOOGLE_MAPS}`\n\n                  fetch(url)\n                    .then(response => {\n                      if(response.ok){\n                          console.log(response)\n                          this.showDirections(response.routes[0])\n                      }else {\n                          console.log(response);\n                      }\n                  })\n                  .then(data => console.log(data))\n                  .catch(data => console.log(data));\n            }\n          }\n\n      }\n\n\n      createMap = () =>\n        new window.google.maps.Map(this.GoogleMapsRef.current, {\n          zoom: 10,\n          center: {\n            lat: 37.3230,\n            lng: -122.0322\n          },\n          disableDefaultUI: true,\n        })\n\n      \n      showDirections(json){\n          var path = window.google.maps.geometry.encoding.decodePath(json.overview_polyline.points);\n\n          var bounds = new window.google.maps.LatLngBounds();\n\n          for (var i = 0; i < path.length; i++) {\n            bounds.extend(path[i]);\n          }\n\n          var polyline = new window.google.maps.Polyline({\n            path: path,\n            strokeColor: '#00BBFF',\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            map: this.googleMaps\n              // strokeColor: \"#0000FF\",\n              // strokeOpacity: 1.0,\n              // strokeWeight: 2\n          });\n          polyline.setMap(this.googleMaps);\n          this.googleMaps.fitBounds(bounds);\n      }\n\n      callbackStart(coordinates){\n          this.setState({startLocation: coordinates});\n\n          var newCoordinates = new window.google.maps.LatLng(coordinates.lat, coordinates.lng);\n\n          this.markerStart = new window.google.maps.Marker({\n            position: newCoordinates,\n            map: this.googleMaps,\n            title: \"Start Location\",\n            animation: window.google.maps.Animation.DROP\n          })\n          this.googleMaps.setCenter(newCoordinates)\n          this.markerStart.setMap(this.googleMaps)\n\n      }\n\n      callbackEnd(coordinates){\n        this.setState({endLocation: coordinates});\n\n        var newCoordinates = new window.google.maps.LatLng(coordinates.lat, coordinates.lng);\n\n        this.markerEnd = new window.google.maps.Marker({\n          position: newCoordinates,\n          title: \"End Location\",\n          animation: window.google.maps.Animation.DROP\n        })\n\n        this.googleMaps.setCenter(newCoordinates)\n        this.markerEnd.setMap(this.googleMaps)\n\n      }\n\n\n      render() {\n        return (\n          <div>\n          <div className=\"map\" ref={this.GoogleMapsRef} />\n          { this.state.loaded ? <GooglePlaces callbackStart={this.callbackStart} callbackEnd={this.callbackEnd} /> : null }\n          </div>\n        );\n      }\n    \n}\n\nexport default GoogleMap;"]},"metadata":{},"sourceType":"module"}